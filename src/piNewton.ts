import { BigMath } from "./bigmath";
import { BigNum } from "./bignum";

const BMath = new BigMath(3000);

const origPi =
  "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134";

const basePi =
  "3.40192378864668405970883048774119144958579211928442905791628953082210047463679994437828071986412713648656078787688994545504508235750157128178251673185843952720786015214654162689803776984837298761510247703148509964501567002399161799661724304315942930250944820761797142502019393021091579852447874013592386507247780559084857859671921451237528125571406025050331526323756692830425062397916375402311821690349806290427246950083373523932865843252584686754171264749496471893328356695601356545130436924725289065076005527357546882038709401689195369362652402325290601052548824194568441912994565503184443910397112633984765320106743653828786697488587184644050859375341015231078601850356665330577824306241465671772064463594922078790342704148300841046541569070210376926600295236996820677376708233822807019823944721252497496605837677873089308428400035560974805563384245715733480927704187953518102632231717353693147917900255713205666556433416713561441521170339260615755279673695071942497559202558212442539174540675609285";

export const stepen = (mem: number): number => {
  let buf = 0;
  for (let i = 0; i < mem; i++) buf += 2;
  buf++;
  return buf;
};

export const scopes = (mem: number): BigNum => {
  let out = new BigNum("0.5");
  for (let i = 1; i < mem; i++)
    out = BMath.multiply(out, new BigNum(1 / 2 - i));
  // console.log('im here', mem, out);

  return BMath.div(out, BMath.factorial(new BigNum(mem)));
};

const comparePis = (original: string, my: string) => {
  const minLen = Math.min(original.length, my.length);
  let succeed = 0;
  for (let i = 0; i < minLen; i++) {
    if (original[i] !== my[i]) return succeed;
    succeed++;
  }
  return succeed;
};

export const calcPiXXX = () => {
  // const multiplyRes = multiply(sqrt3, '3');
  // console.log('multiplyRes', multiplyRes);
  // const divRes1 = div(multiplyRes, '2');
  // console.log('divres1', divRes1);
  // let pi = minus('6', divRes1);
  let pi = new BigNum(basePi);
  console.log("base pi", pi);

  for (let i = 1; i < 10000; i++) {
    const start = performance.now();
    const scopesRes = scopes(i);
    const dividend = BMath.multiply(new BigNum("12"), scopesRes);
    // console.log('divident args:', '12', scopesRes);
    const exp2 = BMath.pow(new BigNum("2"), stepen(i));
    const divider = BMath.multiply(new BigNum(stepen(i)), exp2);
    // console.log('divider args:', stepen2(i), exp2);
    // console.log({ dividend, divider });
    const divRes = BMath.div(dividend, divider);
    // console.log('minus args:', pi, divRes);
    pi = BMath.minus(pi, divRes);
    const end = performance.now();
    const equals = comparePis(origPi, pi.value);
    console.log(
      "Iteration:",
      i,
      ", equals:",
      equals,
      "first digits, time",
      (end - start).toFixed(3),
      "ms"
    );
    console.log("Pi", pi.value.slice(0, equals));
    // if (i % 10 === 0) console.log(i, pi);
  }
};

calcPiXXX();
